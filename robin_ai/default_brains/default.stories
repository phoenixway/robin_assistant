    story greet {
        < <intent>greetings
        > Hey! Whats up?
        <if in>
            all right => {
                > Cool!
                > Great to hear that.
            }
            <intent>no => {
                > Oh...
            }
        </if in>
        < fuck
    }
    story quit {
        < <intent>bye
        <fn>
            import sys
            sys.exit(0)
        </fn>
    }

    story {
        < <intent>cursing
        > Dont curse
    }

    story chatgpt{
        < ask chatgpt %s
        <fn>
            query = vars.unnamed_vars[0].value
            import openai
            openai.api_key = "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"
            messages = [ {"role": "system", "content": "You are a intelligent assistant."} ]
            messages.append( {"role": "user", "content": query}, )
            chat = openai.ChatCompletion.create( model="gpt-3.5-turbo", messages=messages )
            log.debug(query)
            ms.say(chat.choices[0].message.content)
            # log.log(chat.choices[0].message.content)
        </fn>
    }

    story alarm{
        < alarm in %d m
        <fn>
            from datetime import datetime, timedelta
            interval = vars.unnamed_vars[0].value
            dt = datetime.now() + timedelta(minutes=int(interval))
            def func(ms, interval):
                ms.say("Ring ring in " + str(interval) + " minutes!")
                import os
                duration = 1  # seconds
                freq = 440  # Hz
                os.system('play -nq -t alsa synth {} sine {}'.format(duration, freq))
            scheduler.add_job(func, 'date', run_date=dt, args=[ms, int(interval)])
            # scheduler.start()
            ret="Alarm will work in " + str(interval) + " minutes!"
        </fn>
        < thanx
        > U welcome, milord.
    }
    story {
        < time
        <fn>
            from datetime import datetime
            ret = str(datetime.now())
        </fn> 
    }

    story {
        < google %s
        <fn>
            import webbrowser
            query = vars.unnamed_vars[0].value
            webbrowser.open('https://www.google.com/search?q={}'.format(query.replace(' ', '+')))
            ret = "Enjoy, sir."
        </fn> 
    }

    story {
        < anime time!
        <fn>
            import webbrowser
            webbrowser.open_new_tab('https://jut.su')
            ret = "Enjoy, sir."
        </fn> 
    }

    story {
        < next wp
        <fn>
            import subprocess
            try:
                result = subprocess.run(['variety', '--next'], stdout=subprocess.PIPE)
                ret = "As u command"
            except subprocess.CalledProcessError:
                ret = "Can't, sorry."
        </fn>
    }
    story {
        < del wp
        <fn>
            import subprocess
            try:
                result = subprocess.run(['variety', '-t'], stdout=subprocess.PIPE)
                ret = "As u command"
            except subprocess.CalledProcessError:
                ret = "Can't, sorry."
        </fn>
    }
    story {
        < fav wp
        <fn>
            import subprocess
            try:
                result = subprocess.run(['variety', '-f'], stdout=subprocess.PIPE)
                ret = "As u command"
            except subprocess.CalledProcessError:
                ret = "Can't, sorry."
        </fn>
    }

    story {
        < inspire me
        <fn>
            import subprocess
            try:
                result = subprocess.run(["motivate"], encoding="utf-8", stdout=subprocess.PIPE)
                print(result.stdout)
                import re
                pattern = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
                # pattern = r'"([A-Za-z0-9_\./\\-]*)"'
                # m = re.search(pattern, result.stdout)
                ret = pattern.sub('', result.stdout)
                # ret = result.stdout.decode('utf-8', errors='strict').strip()
                print(ret)
            except subprocess.CalledProcessError:
                ret = "Can't, sorry."
        </fn>
    }
    story {
        < <intent>thanku
        <fn>
            db['test']='u welcome'          
            ret=db['test']
        </fn>
    }
    story {
        < <intent>about
        > I`m your battle machine - Robin.
    }
    story {
        < open tasks
        <fn>
            os.execute('gedit &')
        </fn>
    }

    story {
        < <intent>stop_phase
        > Ok, boss.
    }
